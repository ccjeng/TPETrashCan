{"version":3,"sources":["main.js"],"names":["getLocation","successCallback","position","currentLocationLatitude","coords","latitude","currentLocationLongitude","longitude","console","log","map","panTo","google","maps","LatLng","errorCallback","error","errorTypes",1,2,3,"code","message","navigator","geolocation","geo","option","enableAcuracy","maximumAge","timeout","getCurrentPosition","alert","initMap","mapOptions","center","lat","lng","zoom","mapTypeId","MapTypeId","ROADMAP","Map","document","getElementById","Parse","initialize","defaultLocationLatitude","defaultLocationLongitude","mc","result","processCallback","res","concat","length","process","id","i","addMarker","MarkerClusterer","markers","gridSize","maxZoom","skip","query","Query","greaterThan","limit","ascending","find","then","image","data","marker","Marker","get","title","icon","infowindow","InfoWindow","content","push","event","addListener","e","this","open"],"mappings":"AAcA,QAAAA,eAiBA,QAAAC,GAAAC,GACAC,wBAAAD,EAAAE,OAAAC,SACAC,yBAAAJ,EAAAE,OAAAG,UAEAC,QAAAC,IAAA,qBAAAN,wBAAA,IAAAG,0BAEAI,IAAAC,MAAA,GAAAC,QAAAC,KAAAC,OAAAX,wBAAAG,2BAGA,QAAAS,GAAAC,GACA,GAAAC,IACA,EAAA,SACAC,EAAA,cACAC,EAAA,WACAC,EAAA,SAEAZ,SAAAC,IAAAQ,EAAAD,EAAAK,OACAb,QAAAC,IAAA,QAAAO,EAAAK,KAAA,IAAAL,EAAAM,SAjCA,GAAAC,UAAAC,YAAA,CACA,GAAAC,GAAAF,UAAAC,YACAE,GACAC,eAAA,EACAC,WAAA,EACAC,QAAA,IAEAJ,GAAAK,mBAAA7B,EACAc,EACAW,OAIAK,OAAA,kBA0BA,QAAAC,WACAhC,cAEAQ,QAAAC,IAAAN,wBAAA,IAAAG,yBAEA,IAAA2B,IACAC,QAAAC,IAAAhC,wBAAAiC,IAAA9B,0BACA+B,KAAA,GACAC,UAAA1B,OAAAC,KAAA0B,UAAAC,QAGA9B,KAAA,GAAAE,QAAAC,KAAA4B,IAAAC,SAAAC,eAAA,OAAAV,GA9DAW,MAAAC,WAAA,2CAAA,2CAKA,IAAAC,yBAAA,WACAC,yBAAA,YAEA5C,wBAAA2C,wBACAxC,yBAAAyC,yBAyCArC,IAiBAsC,GACAC,UACAC,gBAAA,SAAAC,GAEA,GADAF,OAAAA,OAAAG,OAAAD,GACA,KAAAA,EAAAE,OAEA,WADAC,SAAAH,EAAAA,EAAAE,OAAA,GAAAE,GAMA,KAAA,GAAAC,GAAA,EAAAA,EAAAP,OAAAI,OAAAG,IAEAC,UAAAR,OAAAO,GAGAR,IAAA,GAAAU,iBAAAhD,IAAAiD,SAAAC,SAAA,GAAAC,QAAA,MAIAP,QAAA,SAAAQ,GACA,GAAAC,GAAA,GAAAnB,OAAAoB,MAAA,YAEAF,IACAC,EAAAE,YAAA,WAAAH,GAEAC,EAAAG,MAAA,KACAH,EAAAI,UAAA,YACAJ,EAAAK,OAAAC,KAAA,SAAAlB,GACAD,gBAAAC,IACA,SAAAnC,GACAR,QAAAC,IAAA,UAAAO,EAAAK,KAAA,IAAAL,EAAAM,WAGAgC,UAAA,EAWA,IAAAK,YACAW,MAAA,cAEAb,UAAA,SAAAc,GAEA,GAAAC,GAAA,GAAA5D,QAAAC,KAAA4D,QACAvE,SAAA,GAAAU,QAAAC,KAAAC,OAAAyD,EAAAG,IAAA,YAAArE,SAAAkE,EAAAG,IAAA,YAAAnE,WACAG,IAAAA,IACAiE,MAAAJ,EAAAG,IAAA,QAAAH,EAAAG,IAAA,WACAE,KAAAN,OAGAE,GAAAK,WAAA,GAAAjE,QAAAC,KAAAiE,YACAC,QAAA,OAAAR,EAAAG,IAAA,UAAA,2FAEAH,EAAAG,IAAA,YAAArE,SAAA,IAAAkE,EAAAG,IAAA,YAAAnE,UAAA,yCACAgE,EAAAG,IAAA,QAAAH,EAAAG,IAAA,WAAA,UAIAf,QAAAqB,KAAAR,GAEA5D,OAAAC,KAAAoE,MAAAC,YAAAV,EAAA,QAAA,SAAAW,GACAzE,IAAAC,MAAAyE,KAAAlF,UAGAkF,KAAAP,WAAAQ,KAAA3E,IAAA8D","file":"all.min.js","sourcesContent":["\n//initialize\n//Parse.$ = jQuery;\nParse.initialize('5fzYdG6YMpMPKBNSqvzhEL1OVoXgcVvlCAghW09Q', 'NK9ycOzWNik9d6axOAndjYXwRuycfX2qTIyidyxV');\n\n//Get user location HTML5 >> if no location, set default location\n\n\nvar defaultLocationLatitude = 25.0339031;\nvar defaultLocationLongitude = 121.5645098;\n\nvar currentLocationLatitude = defaultLocationLatitude;\nvar currentLocationLongitude = defaultLocationLongitude;\n \nfunction getLocation() {\n  if (navigator.geolocation) {\n          var geo=navigator.geolocation;\n          var option={\n                enableAcuracy:false,\n                maximumAge:0,\n                timeout:600000\n                };\n          geo.getCurrentPosition(successCallback,\n                                 errorCallback,\n                                 option\n                                 );\n          }\n  else {\n        alert('此瀏覽器不支援地理定位功能!');\n  }\n\n  function successCallback(position) {\n        currentLocationLatitude = position.coords.latitude;\n        currentLocationLongitude = position.coords.longitude;    \n\n        console.log('successCallback = ' + currentLocationLatitude + ',' + currentLocationLongitude);\n\n        map.panTo( new google.maps.LatLng(currentLocationLatitude, currentLocationLongitude) );\n\n  }\n  function errorCallback(error) {\n        var errorTypes={\n              0:\"不明原因錯誤\",\n              1:\"使用者拒絕提供位置資訊\",\n              2:\"無法取得位置資訊\",\n              3:\"位置查詢逾時\"\n              };\n        console.log(errorTypes[error.code]);\n        console.log(\"code=\" + error.code + \" \" + error.message); //開發測試時用\n  }\n}\n\n\nvar map;\nfunction initMap() {\n  getLocation();\n\n  console.log(currentLocationLatitude + ',' + currentLocationLongitude);\n\n  var mapOptions = {\n     center: {lat: currentLocationLatitude, lng: currentLocationLongitude},\n      zoom: 17,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n  };\n\n  map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\n\n}\n\n\nvar mc;\nvar result = [];\nvar processCallback = function(res) {\n                result = result.concat(res);\n                if (res.length == 1000) {\n                  process(res[res.length-1].id);\n                  return;\n                }   \n                //console.log(result.length);\n\n                //To print all results\n                for(var i=0;i<result.length;i++){\n                        //console.log(result[i].id);\n                        addMarker(result[i]);\n                }\n\n                mc = new MarkerClusterer(map, markers, {gridSize: 80, maxZoom: 16});\n\n}\n\nvar process = function(skip) {\n    var query = new Parse.Query(\"TPE201509\");\n\n            if (skip) {\n              query.greaterThan(\"objectId\", skip);\n            }\n            query.limit(1000);\n            query.ascending(\"objectId\");\n            query.find().then(function querySuccess(res) {\n                processCallback(res);\n            }, function queryFailed(error) {\n                console.log('Error: ' + error.code + ' ' + error.message);\n            });\n}\nprocess(false);\n\n//\n\n/*\ngoogle.maps.InfoWindow.prototype.isOpen = function(){\n  var map = this.getMap();\n  return (map !== null && typeof map !== \"undefined\");\n}*/\n\n\nvar markers = [];\nvar image = 'img/pin.png';\n\nvar addMarker = function(data){\n\n  var marker = new google.maps.Marker({\n        position : new google.maps.LatLng(data.get('location').latitude, data.get('location').longitude), \n        map : map,\n        title : data.get('road') + data.get('address'),\n        icon : image\n  });\n\n  marker.infowindow = new google.maps.InfoWindow({\n      content: '<h4>'+ data.get('region') + '</h4>'\n          + '<p><img src=\"https://maps.googleapis.com/maps/api/streetview?size=400x180&location='\n          + data.get('location').latitude +','+data.get('location').longitude+'&fov=90&heading=180&pitch=10\"></p>'\n          + '<h4>' + data.get('road') + data.get('address') + '</h4>'\n          \n  });\n\n  markers.push(marker);\n\n  google.maps.event.addListener(marker, 'click', function(e){\n      map.panTo( this.position );\n      //map.setZoom(17);\n      //for (var i = 0; i < markers.length; i++) { if(markers[i].infowindow.isOpen()){ markers[i].infowindow.close(); } }\n      this.infowindow.open(map, marker);\n  });\n};\n\n\n"],"sourceRoot":"/source/"}