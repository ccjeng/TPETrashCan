{"version":3,"sources":["main.js"],"names":["getLocation","successCallback","position","currentLocationLatitude","coords","latitude","currentLocationLongitude","longitude","currentMarker","errorCallback","error","errorTypes",1,2,3,"alert","code","console","log","message","navigator","geolocation","option","enableAcuracy","maximumAge","timeout","getCurrentPosition","initMap","mapOptions","center","lat","lng","zoom","mapTypeId","google","maps","MapTypeId","ROADMAP","map","Map","document","getElementById","GeoMarker","GeolocationMarker","setCircleOptions","fillColor","event","addListenerOnce","setCenter","this","getPosition","addListener","e","setMap","getTrashCanData","firebase","database","ref","on","snapshot","result","val","i","length","addMarker","config","apiKey","authDomain","databaseURL","storageBucket","initializeApp","defaultLocationLatitude","defaultLocationLongitude","mc","markers","image","InfoWindow","prototype","isOpen","getMap","data","marker","Marker","LatLng","title","address","icon","infowindow","content","region","push","panTo","close","open"],"mappings":"AAgBA,QAAAA,eAaA,QAAAC,GAAAC,GACAC,wBAAAD,EAAAE,OAAAC,SACAC,yBAAAJ,EAAAE,OAAAG,UAEAC,gBAIA,QAAAC,GAAAC,GACA,GAAAC,IACA,EAAA,SACAC,EAAA,cACAC,EAAA,WACAC,EAAA,SAEAC,OAAAJ,EAAAD,EAAAM,OACAC,QAAAC,IAAA,QAAAR,EAAAM,KAAA,IAAAN,EAAAS,SA5BA,GAAAC,UAAAC,YAAA,CACA,GAAAC,IACAC,eAAA,EACAC,WAAA,EACAC,QAAA,IAEAL,WAAAC,YAAAK,mBAAAzB,EAAAQ,EAAAa,OAGAP,OAAA,kBAyBA,QAAAY,WAEA,GAAAC,IACAC,QAAAC,IAAA3B,wBAAA4B,IAAAzB,0BACA0B,KAAA,GACAC,UAAAC,OAAAC,KAAAC,UAAAC,QAGAC,KAAA,GAAAJ,QAAAC,KAAAI,IAAAC,SAAAC,eAAA,OAAAb,GAEA5B,cAIA,QAAAQ,iBAEA,GAAAkC,GAAA,GAAAC,mBAAAL,IAEAI,GAAAE,kBAAAC,UAAA,YAEAX,OAAAC,KAAAW,MAAAC,gBAAAL,EAAA,mBAAA,WACAJ,IAAAU,UAAAC,KAAAC,iBAIAhB,OAAAC,KAAAW,MAAAK,YAAAT,EAAA,oBAAA,SAAAU,GACArC,MAAA,aAAAqC,EAAAjC,WAGAuB,EAAAW,OAAAf,KAOA,QAAAgB,mBAEAC,SAAAC,WAAAC,IAAA,YAAAC,GAAA,QAAA,SAAAC,GACAC,OAAAD,EAAAE,KAEA,KAAA,GAAAC,GAAA,EAAAA,EAAAF,OAAAG,OAAAD,IACAE,UAAAJ,OAAAE,MA5FA,GAAAG,SACAC,OAAA,0CACAC,WAAA,6BACAC,YAAA,oCACAC,cAAA,yBAEAd,UAAAe,cAAAL,OAGA,IAAAM,yBAAA,WACAC,yBAAA,YAEArE,wBAAAoE,wBACAjE,yBAAAkE,yBAoCAlC,IAkCAmC,GACAb,SAcAN,kBAEA,IAAAoB,YACAC,MAAA,aAEAzC,QAAAC,KAAAyC,WAAAC,UAAAC,OAAA,WACA,GAAAxC,GAAAW,KAAA8B,QACA,OAAA,QAAAzC,GAAA,mBAAAA,GAGA,IAAA0B,WAAA,SAAAgB,GAEA,GAAAC,GAAA,GAAA/C,QAAAC,KAAA+C,QACAhF,SAAA,GAAAgC,QAAAC,KAAAgD,OAAAH,EAAA3E,SAAA2E,EAAAzE,WACA+B,IAAAA,IACA8C,MAAAJ,EAAAK,QACAC,KAAAX,OAGAM,GAAAM,WAAA,GAAArD,QAAAC,KAAAyC,YACAY,QAAA,OAAAR,EAAAS,OAAA,YAGAT,EAAAK,QAAA,UAIAX,QAAAgB,KAAAT,GAGA/C,OAAAC,KAAAW,MAAAK,YAAA8B,EAAA,QAAA,SAAA7B,GACAd,IAAAqD,MAAA1C,KAAA/C,SAEA,KAAA,GAAA4D,GAAA,EAAAA,EAAAY,QAAAX,OAAAD,IAAAY,QAAAZ,GAAAyB,WAAAT,UAAAJ,QAAAZ,GAAAyB,WAAAK,OACA3C,MAAAsC,WAAAM,KAAAvD,IAAA2C","file":"all.min.js","sourcesContent":["// Initialize Firebase\nvar config = {\n    apiKey: \"AIzaSyAKzyUWsDXRQzIJesKLpl9Ox1d757pbLRc\",\n    authDomain: \"tptrashcan.firebaseapp.com\",\n    databaseURL: \"https://tptrashcan.firebaseio.com\",\n    storageBucket: \"tptrashcan.appspot.com\",\n  };\nfirebase.initializeApp(config);\n\n//Get user location\nvar defaultLocationLatitude = 25.0339031;\nvar defaultLocationLongitude = 121.5645098;\n\nvar currentLocationLatitude = defaultLocationLatitude;\nvar currentLocationLongitude = defaultLocationLongitude;\n\nfunction getLocation() {\n  if (navigator.geolocation) {\n        var option={\n            enableAcuracy:false,\n            maximumAge:0,\n            timeout:600000\n        };\n        navigator.geolocation.getCurrentPosition(successCallback, errorCallback, option);\n  }\n  else {\n        alert('此瀏覽器不支援地理定位功能!');\n  }\n\n  function successCallback(position) {\n        currentLocationLatitude = position.coords.latitude;\n        currentLocationLongitude = position.coords.longitude;\n\n        currentMarker();\n\n\n  }\n  function errorCallback(error) {\n        var errorTypes={\n              0:\"不明原因錯誤\",\n              1:\"使用者拒絕提供位置資訊\",\n              2:\"無法取得位置資訊\",\n              3:\"位置查詢逾時\"\n              };\n        alert(errorTypes[error.code]);\n        console.log(\"code=\" + error.code + \" \" + error.message); //開發測試時用\n  }\n}\n\n\nvar map;\nfunction initMap() {\n\n  var mapOptions = {\n      center: {lat: currentLocationLatitude, lng: currentLocationLongitude},\n      zoom: 17,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n  };\n\n  map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\n\n  getLocation();\n\n}\n\nfunction currentMarker(){\n\n  var GeoMarker = new GeolocationMarker(map);\n\n  GeoMarker.setCircleOptions({fillColor: '#808080'});\n\n  google.maps.event.addListenerOnce(GeoMarker, 'position_changed', function() {\n     map.setCenter(this.getPosition());\n     //map.fitBounds(this.getBounds());\n  });\n\n  google.maps.event.addListener(GeoMarker, 'geolocation_error', function(e) {\n     alert('無法取得位置資訊. ' + e.message);\n  });\n\n  GeoMarker.setMap(map);\n\n}\n\nvar mc;\nvar result = [];\n\nfunction getTrashCanData() {\n\n  firebase.database().ref('results/').on('value', function(snapshot) {\n    result = snapshot.val();\n\n    for(var i=0; i<result.length;i++) {\n      addMarker(result[i]);\n    }\n  });\n\n}\n\ngetTrashCanData();\n\nvar markers = [];\nvar image = 'img/pin.png';\n\ngoogle.maps.InfoWindow.prototype.isOpen = function(){\n  var map = this.getMap();\n  return (map !== null && typeof map !== \"undefined\");\n}\n\nvar addMarker = function(data){\n\n  var marker = new google.maps.Marker({\n        position : new google.maps.LatLng(data.latitude, data.longitude),\n        map : map,\n        title : data.address,\n        icon : image\n  });\n\n  marker.infowindow = new google.maps.InfoWindow({\n      content: '<h4>'+ data.region + '</h4>'\n        //  + '<p><img src=\"https://maps.googleapis.com/maps/api/streetview?size=400x180&location='\n        //  + data.latitude +','+data.longitude +'&fov=90&heading=180&pitch=10\"></p>'\n          + '<h4>' + data.address+ '</h4>'\n\n  });\n\n  markers.push(marker);\n\n\n  google.maps.event.addListener(marker, 'click', function(e){\n      map.panTo( this.position );\n      //map.setZoom(17);\n      for (var i = 0; i < markers.length; i++) { if(markers[i].infowindow.isOpen()){ markers[i].infowindow.close(); } }\n      this.infowindow.open(map, marker);\n\n  });\n};\n"],"sourceRoot":"/source/"}