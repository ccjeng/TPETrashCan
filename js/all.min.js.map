{"version":3,"sources":["main.js"],"names":["getLocation","successCallback","position","currentLocationLatitude","coords","latitude","currentLocationLongitude","longitude","currentMarker","errorCallback","error","errorTypes",1,2,3,"alert","code","console","log","message","navigator","geolocation","option","enableAcuracy","maximumAge","timeout","getCurrentPosition","initMap","mapOptions","center","lat","lng","zoom","mapTypeId","google","maps","MapTypeId","ROADMAP","map","Map","document","getElementById","GeoMarker","GeolocationMarker","setCircleOptions","fillColor","event","addListenerOnce","setCenter","this","getPosition","addListener","e","setMap","Parse","initialize","defaultLocationLatitude","defaultLocationLongitude","mc","result","processCallback","res","concat","length","process","id","i","addMarker","MarkerClusterer","markers","gridSize","maxZoom","skip","query","Query","greaterThan","limit","ascending","find","then","image","InfoWindow","prototype","isOpen","getMap","data","marker","Marker","LatLng","get","title","icon","infowindow","content","push","panTo","close","open"],"mappings":"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","file":"all.min.js","sourcesContent":["\n//initialize\n//Parse.$ = jQuery;\nParse.initialize('5fzYdG6YMpMPKBNSqvzhEL1OVoXgcVvlCAghW09Q', 'NK9ycOzWNik9d6axOAndjYXwRuycfX2qTIyidyxV');\n\n//Get user location\nvar defaultLocationLatitude = 25.0339031;\nvar defaultLocationLongitude = 121.5645098;\n\nvar currentLocationLatitude = defaultLocationLatitude;\nvar currentLocationLongitude = defaultLocationLongitude;\n\nfunction getLocation() {\n  if (navigator.geolocation) {\n        var option={\n            enableAcuracy:false,\n            maximumAge:0,\n            timeout:600000\n        };\n        navigator.geolocation.getCurrentPosition(successCallback, errorCallback, option);\n  }\n  else {\n        alert('此瀏覽器不支援地理定位功能!');\n  }\n\n  function successCallback(position) {\n        currentLocationLatitude = position.coords.latitude;\n        currentLocationLongitude = position.coords.longitude;    \n\n        currentMarker();\n\n\n  }\n  function errorCallback(error) {\n        var errorTypes={\n              0:\"不明原因錯誤\",\n              1:\"使用者拒絕提供位置資訊\",\n              2:\"無法取得位置資訊\",\n              3:\"位置查詢逾時\"\n              };\n        alert(errorTypes[error.code]);\n        console.log(\"code=\" + error.code + \" \" + error.message); //開發測試時用\n  }\n}\n\n\nvar map;\nfunction initMap() {\n\n  var mapOptions = {\n      center: {lat: currentLocationLatitude, lng: currentLocationLongitude},\n      zoom: 17,\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n  };\n\n  map = new google.maps.Map(document.getElementById(\"map\"), mapOptions);\n\n  getLocation();\n\n}\n\nfunction currentMarker(){\n\n  var GeoMarker = new GeolocationMarker(map);\n\n  GeoMarker.setCircleOptions({fillColor: '#808080'});\n\n  google.maps.event.addListenerOnce(GeoMarker, 'position_changed', function() {\n     map.setCenter(this.getPosition());\n     //map.fitBounds(this.getBounds());\n  });\n\n  google.maps.event.addListener(GeoMarker, 'geolocation_error', function(e) {\n     alert('無法取得位置資訊. ' + e.message);\n  });\n\n  GeoMarker.setMap(map);\n\n}\n\nvar mc;\nvar result = [];\nvar processCallback = function(res) {\n                result = result.concat(res);\n                if (res.length == 1000) {\n                  process(res[res.length-1].id);\n                  return;\n                }   \n                //console.log(result.length);\n\n                //To print all results\n                for(var i=0;i<result.length;i++){\n                        //console.log(result[i].id);\n                        addMarker(result[i]);\n                }\n\n           mc = new MarkerClusterer(map, markers, {gridSize: 80, maxZoom: 14});\n\n}\n\nvar process = function(skip) {\n    var query = new Parse.Query(\"TPE112515\");\n\n            if (skip) {\n              query.greaterThan(\"objectId\", skip);\n            }\n            query.limit(1000);\n            query.ascending(\"objectId\");\n            query.find().then(function querySuccess(res) {\n                processCallback(res);\n            }, function queryFailed(error) {\n                console.log('Error: ' + error.code + ' ' + error.message);\n            });\n}\nprocess(false);\n\n\nvar markers = [];\nvar image = 'img/pin.png';\n\ngoogle.maps.InfoWindow.prototype.isOpen = function(){\n  var map = this.getMap();\n  return (map !== null && typeof map !== \"undefined\");\n}\n\nvar addMarker = function(data){\n\n  var marker = new google.maps.Marker({\n        position : new google.maps.LatLng(data.get('location').latitude, data.get('location').longitude), \n        map : map,\n        title : data.get('road') + data.get('address'),\n        icon : image\n  });\n\n  marker.infowindow = new google.maps.InfoWindow({\n      content: '<h4>'+ data.get('region') + '</h4>'\n          + '<p><img src=\"https://maps.googleapis.com/maps/api/streetview?size=400x180&location='\n          + data.get('location').latitude +','+data.get('location').longitude+'&fov=90&heading=180&pitch=10\"></p>'\n          + '<h4>' + data.get('road') + data.get('address') + '</h4>'\n          \n  });\n\n  markers.push(marker);\n\n\n  google.maps.event.addListener(marker, 'click', function(e){\n      map.panTo( this.position );\n      //map.setZoom(17);\n      for (var i = 0; i < markers.length; i++) { if(markers[i].infowindow.isOpen()){ markers[i].infowindow.close(); } }\n      this.infowindow.open(map, marker);\n\n  });\n};\n\n\n"],"sourceRoot":"/source/"}